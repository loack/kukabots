&ACCESS RVP
&REL 1
&PARAM TPVW_VERSION = 3.3.5
DEF Cell( )
SPS_N=-1

VW (#VW_AUE_INIT,TRUE)
PENTER:
INTERRUPT DECL 10 WHEN $CYCFLAG[30]==FALSE DO VW(#FB_STOP,TRUE)
INTERRUPT ON 10
INT10=TRUE

SPS_FERTIG = FALSE
INTERRUPT DECL 10 WHEN $CYCFLAG[30]==FALSE DO VW(#FB_STOP,TRUE)
INTERRUPT ON 10
INT10=TRUE
VW(#VW_INIT,TRUE)
;VW_USR_R (#USR_INIT)
TRIGGER  WHEN DISTANCE=1 DELAY=-0.1 DO P0_MERKER=TRUE

;VW(#MPARA,TRUE)
;Define accerlation, velocity, and base
$VEL_AXIS[1]=100 ;definition of the axis velocities
$VEL_AXIS[2]=100
$VEL_AXIS[3]=100
$VEL_AXIS[4]=100
$VEL_AXIS[5]=100
$VEL_AXIS[6]=100
$ACC_AXIS[1]=100 ;definition of the axis accelerations
$ACC_AXIS[2]=100
$ACC_AXIS[3]=100
$ACC_AXIS[4]=100
$ACC_AXIS[5]=100
$ACC_AXIS[6]=100

$VEL.CP = KVP_VELOCITY ; Set the default velocity for the
$ACC.CP = KVP_ACCELERATION ; Set the default acceleration for the trajectory

WHILE TRUE
IF KVPMOVE_ENABLE THEN
KVP_MOTION_END = FALSE

    IF KVP_PTP_MOTION THEN
        ; PTP motion
        PTP P1
    ENDIF
    IF KVP_LIN_MOTION THEN
        ; Linear motion
        PTP BUFFER1_E6POS[1]
    ENDIF
    IF KVP_TRAJECTORY_MODE THEN
        ;Exit if true
        IF EXIT_TRAJECTORY THEN
            EXIT
        ENDIF
     
        ; Set global look-ahead and approximation
        $ADVANCE = NB_ADVANCE_POINTS
        $APO.CDIS = KVP_APROX_CDIS

        ; Reset flags for a new trajectory
        COM_TRAJECTORY_FINISHED = FALSE
        EXIT_TRAJECTORY = FALSE ; Ensure this flag is reset by external app too
        ;----Initialise by starting at first point of trajectory----------
        ; Make sure BUFFER_E6POS[1] contains the actual start point of the trajectory.
        PTP BUFFER1_E6POS[1]

        TOTAL_POINTS=TRAJ_TOTAL_POINTS
        $ORI_TYPE=#CONST ; set orientation of tool to constant

        ;ENTER BUFFER LOOP
        WHILE TRUE
            ;Exit if true
            IF EXIT_TRAJECTORY THEN
                EXIT
            ENDIF

            IF EXEC_BUFF1 THEN
                BUFFER1_END = FALSE
                FOR POINT_INDEX=1 TO 100                 
                COM_CURRENT_POINT_INDEX = POINT_INDEX
                ; Définir la vitesse spécifique pour ce point
                $VEL.CP = BUFFER1_VELOCITY[POINT_INDEX]
                
                ; Exécuter le type de mouvement approprié
                SWITCH BUFFER1_MOVE_TYPE[POINT_INDEX]
                    CASE 1
                        ; Mouvement linéaire
                        LIN BUFFER1_E6POS[POINT_INDEX] C_DIS
                    CASE 2
                        ; Mouvement circulaire avec point de passage
                        CIRC BUFFER1_AUX_POS[POINT_INDEX], BUFFER1_E6POS[POINT_INDEX] C_DIS
                    CASE 3
                        ; Mouvement circulaire avec point central (nécessite adaptation)
                        ; Note: KUKA ne supporte pas directement les arcs par centre
                        ; Il faut calculer le point de passage à partir du centre
                        LIN BUFFER1_E6POS[POINT_INDEX] C_DIS
                    DEFAULT
                        ; Mouvement linéaire par défaut
                        LIN BUFFER1_E6POS[POINT_INDEX] C_DIS
                ENDSWITCH
                
                ; If EXIT_TRAJECTORY was set, break out of the main LOOP as well
                IF EXIT_TRAJECTORY THEN
                    EXIT
                ENDIF
                ENDFOR
                BUFFER1_END = TRUE
            ENDIF

            IF EXEC_BUFF2 THEN
                BUFFER2_END = FALSE
                FOR POINT_INDEX=1 TO 100                 
                COM_CURRENT_POINT_INDEX = POINT_INDEX
                ; Définir la vitesse spécifique pour ce point
                $VEL.CP = BUFFER2_VELOCITY[POINT_INDEX]
                
                ; Exécuter le type de mouvement approprié
                SWITCH BUFFER2_MOVE_TYPE[POINT_INDEX]
                    CASE 1
                        ; Mouvement linéaire
                        LIN BUFFER2_E6POS[POINT_INDEX] C_DIS
                    CASE 2
                        ; Mouvement circulaire avec point de passage
                        CIRC BUFFER2_AUX_POS[POINT_INDEX], BUFFER2_E6POS[POINT_INDEX] C_DIS
                    CASE 3
                        ; Mouvement circulaire avec point central
                        LIN BUFFER2_E6POS[POINT_INDEX] C_DIS
                    DEFAULT
                        ; Mouvement linéaire par défaut
                        LIN BUFFER2_E6POS[POINT_INDEX] C_DIS
                ENDSWITCH
                
                ; If EXIT_TRAJECTORY was set, break out of the main LOOP as well
                IF EXIT_TRAJECTORY THEN
                    EXIT
                ENDIF
                ENDFOR
                BUFFER2_END = TRUE
            ENDIF

            IF EXEC_BUFF3 THEN
                BUFFER3_END = FALSE
                FOR POINT_INDEX=1 TO 100                 
                COM_CURRENT_POINT_INDEX = POINT_INDEX
                ; Définir la vitesse spécifique pour ce point
                $VEL.CP = BUFFER3_VELOCITY[POINT_INDEX]
                
                ; Exécuter le type de mouvement approprié
                SWITCH BUFFER3_MOVE_TYPE[POINT_INDEX]
                    CASE 1
                        ; Mouvement linéaire
                        LIN BUFFER3_E6POS[POINT_INDEX] C_DIS
                    CASE 2
                        ; Mouvement circulaire avec point de passage
                        CIRC BUFFER3_AUX_POS[POINT_INDEX], BUFFER3_E6POS[POINT_INDEX] C_DIS
                    CASE 3
                        ; Mouvement circulaire avec point central
                        LIN BUFFER3_E6POS[POINT_INDEX] C_DIS
                    DEFAULT
                        ; Mouvement linéaire par défaut
                        LIN BUFFER3_E6POS[POINT_INDEX] C_DIS
                ENDSWITCH
                
                ; If EXIT_TRAJECTORY was set, break out of the main LOOP as well
                IF EXIT_TRAJECTORY THEN
                    EXIT
                ENDIF
                ENDFOR
                BUFFER3_END = TRUE
            ENDIF 

        ENDWHILE
        ; --- End of Trajectory Mode Enhancements ---
        COM_TRAJECTORY_FINISHED = TRUE
    ENDIF

ENDIF

KVP_MOTION_END = TRUE
WAIT SEC 0.1

ENDWHILE

END