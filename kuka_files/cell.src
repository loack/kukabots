&ACCESS RVP1
&REL 1
&PARAM TEMPLATE = C:\KRC\Roboter\Template\vorgabe
&PARAM TPVW_VERSION = 3.3.5
&PARAM EDITMASK = Folge999[1-128]

DEF Cell( )
SPS_N=-1

VW (#VW_AUE_INIT,TRUE)
PENTER:
INTERRUPT DECL 10 WHEN $CYCFLAG[30]==FALSE DO VW(#FB_STOP,TRUE)
INTERRUPT ON 10
INT10=TRUE

SPS_FERTIG = FALSE
INTERRUPT DECL 10 WHEN $CYCFLAG[30]==FALSE DO VW(#FB_STOP,TRUE)
INTERRUPT ON 10
INT10=TRUE
VW(#VW_INIT,TRUE)
;VW_USR_R (#USR_INIT)
TRIGGER  WHEN DISTANCE=1 DELAY=-0.1 DO P0_MERKER=TRUE

;VW(#MPARA,TRUE)
;Define accerlation, velocity, and base
;MOVE TO P1 (computer controlled)

;Enter the main loop
WHILE TRUE

IF KVPMOVE_ENABLE THEN
KVP_MOTION_END = FALSE

    IF KVP_PTP_MOTION THEN
        ; PTP motion
        PTP P1
    ENDIF
    IF KVP_LIN_MOTION THEN
        ; Linear motion
        PTP XPT1
    ENDIF

    IF KVP_TRAJECTORY_MODE THEN
        ; Trajectory motion
        TRAJECTORY_MOT()
    ENDIF

ENDIF
KVP_MOTION_END = TRUE
ENDWHILE

END

DEF TRAJECTORY_MOT()
   ; Initialize variables if needed
   COM_NEW_POINTS = 0
   COM_CURRENT_POINT_INDEX = 0
   COM_TRAJECTORY_FINISHED = FALSE

   ;Advance to look ahead for new points
   $ADVANCE = NB_ADVANCE_POINTS 

   LOOP
      ; Wait for new points to be sent from external application
      WAIT FOR COM_NEW_POINTS > 0

      FOR COM_CURRENT_POINT_INDEX = 1 TO COM_NEW_POINTS
         ; Execute the point. Adjust velocity, approximation, etc., as needed.
         ; Use LIN for linear, PTP for point-to-point.
         LIN COM_E6POS[COM_CURRENT_POINT_INDEX] C_DIS ; C_DIS for continuous path

         ; Exit loop if asked
         IF EXIT_TRAJECTORY THEN
            COM_TRAJECTORY_FINISHED = TRUE
            BREAK ; Exit the FOR loop
         ENDIF
      ENDFOR

      COM_NEW_POINTS = 0 ; Reset the flag for the next chunk
      ; Check if the entire trajectory is finished
      IF COM_TRAJECTORY_FINISHED THEN
        EXIT_TRAJECTORY  =FALSE ; Reset the exit flag
        COM_TRAJECTORY_FINISHED = FALSE ; Reset the trajectory finished flag
        BREAK ; Exit the loop
      ENDIF
   ENDLOOP
   
END
