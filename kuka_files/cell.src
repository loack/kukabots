&ACCESS RVP
&REL 1
&PARAM TPVW_VERSION = 3.3.5
DEF Cell( )
SPS_N=-1

VW (#VW_AUE_INIT,TRUE)
PENTER:
INTERRUPT DECL 10 WHEN $CYCFLAG[30]==FALSE DO VW(#FB_STOP,TRUE)
INTERRUPT ON 10
INT10=TRUE

SPS_FERTIG = FALSE
INTERRUPT DECL 10 WHEN $CYCFLAG[30]==FALSE DO VW(#FB_STOP,TRUE)
INTERRUPT ON 10
INT10=TRUE
VW(#VW_INIT,TRUE)
;VW_USR_R (#USR_INIT)
TRIGGER  WHEN DISTANCE=1 DELAY=-0.1 DO P0_MERKER=TRUE

;VW(#MPARA,TRUE)
;Define accerlation, velocity, and base

WHILE TRUE
IF KVPMOVE_ENABLE THEN
KVP_MOTION_END = FALSE

    IF KVP_PTP_MOTION THEN
        ; PTP motion
        PTP P1
    ENDIF
    IF KVP_LIN_MOTION THEN
        ; Linear motion
        PTP COM_E6POS[1]
    ENDIF

    IF KVP_TRAJECTORY_MODE THEN
        ; --- Trajectory Mode Enhancements ---

        ; Ensure the robot is at the first point before starting the continuous path
        ; This separates the initial PTP move from the continuous LIN segment.
        ; Make sure COM_E6POS[1] contains the actual start point of the trajectory.
        PTP COM_E6POS[1]

        ; Set global look-ahead and approximation
        $ADVANCE = NB_ADVANCE_POINTS
        $APO.CDIS = KVP_APO

        ; Reset flags for a new trajectory
        COM_TRAJECTORY_FINISHED = FALSE
        EXIT_TRAJECTORY = FALSE ; Ensure this flag is reset by external app too

        ; --- Loop to handle multiple chunks of points ---
        LOOP
            ; Wait for new points to be ready from the external application
            ; Set where to initiate trajectory
            LOOP_START = COM_LOOP_START
            LOOP_END = COM_LOOP_END

            ; Execute the received chunk of points
            FOR POINT_INDEX = LOOP_START TO LOOP_END
                LIN COM_E6POS[POINT_INDEX] C_DIS

                COM_CURRENT_POINT_INDEX = POINT_INDEX
                ; Exit loop if external app asks for it (e.g., emergency stop, trajectory aborted)
                IF EXIT_TRAJECTORY THEN
                    EXIT ; Exit the FOR loop
                ENDIF
            ENDFOR

            ; If EXIT_TRAJECTORY was set, break out of the main LOOP as well
            IF EXIT_TRAJECTORY THEN
                EXIT
            ENDIF

            IF COM_ALL_POINTS_TRANSMITTED THEN; Flag to signal end of trajectory
                EXIT
            ENDIF

        ENDLOOP
        ; --- End of Trajectory Mode Enhancements ---
        COM_TRAJECTORY_FINISHED = TRUE
    ENDIF

ENDIF

KVP_MOTION_END = TRUE
WAIT SEC 0.1

ENDWHILE

END