&ACCESS  RVP
DEF  $__IDENT ( )
; FOLD SYSTEM FILE .... NEVER EDIT!
; ENDFOLD 
; FOLD ;%{H} % INITIALISATION
INT ERG, AXIS_NO, I
DECL E6AXIS IDENT_START  ;LOCAL VARIABLE, IF EXTERN AXIS EXIST
DECL REAL OV_PRO_SAVE
DECL INT OVERRIDE_PERCENT[3]
DECL MSG_T EMPTY_MSG
EMPTY_MSG={MSG_T: VALID FALSE,RELEASE FALSE,TYP #NOTIFY, MODUL[] " ",KEY[] " ",PARAM_TYP #VALUE,PARAM[] " ",DLG_FORMAT[] " ",ANSWER 0}

FOR AXIS_NO=1 TO  6
$VEL_AXIS[AXIS_NO]=100
ENDFOR

FOR AXIS_NO=1 TO  $EX_AX_NUM
$VEL_EXTAX[AXIS_NO]=100
ENDFOR

FOR AXIS_NO=1 TO  6
$ACC_AXIS[AXIS_NO]=50
ENDFOR

FOR AXIS_NO=1 TO  $EX_AX_NUM
$ACC_EXTAX[AXIS_NO]=50
ENDFOR

$FILTER=0
$ADVANCE=0

OVERRIDE_PERCENT[1]=50
OVERRIDE_PERCENT[2]=80
OVERRIDE_PERCENT[3]=100

; ENDFOLD

;FOLD AKTIVATION OF IDENTIFICATION
WAIT FOR  TRUE
$IDENT_STATE=#I_READY ;  READ DEFINITION FILE
WAIT SEC 0.1

IF $IDENT_STATE<>#I_READY THEN
GOTO IDENT_END
ENDIF
;ENDFOLD 

;FOLD MOVEMENT TO STARTPOINT OF TRAJECTORY

IDENT_START = $IDENT_STARTP

IF $EX_AX_NUM > 0 THEN
   IDENT_START.E1 = $AXIS_ACT.E1
   IDENT_START.E2 = $AXIS_ACT.E2
   IDENT_START.E3 = $AXIS_ACT.E3
   IDENT_START.E4 = $AXIS_ACT.E4
   IDENT_START.E5 = $AXIS_ACT.E5
   IDENT_START.E6 = $AXIS_ACT.E6
ENDIF

PTP IDENT_START

; ENDFOLD

;FOLD MEASUREMENT TRAJECTORY 
REPEAT
; 
PTP  IDENT_START ;  FOR INTERRUPTED MOVEMENTS

WAIT FOR  TRUE
$MSG_T.VALID=FALSE
WAIT SEC 0.5
$MSG_T.TYP=#DIALOG
$MSG_T.PARAM_TYP=#WORDS
$MSG_T.RELEASE=FALSE
$MSG_T.KEY[]="test / warm-up / measurement ?                                          "
$MSG_T.DLG_FORMAT[]="test|warm-up|meas|end                                            "
$MSG_T.VALID=TRUE
WHILE  $MSG_T.VALID
WAIT SEC 0.5
ENDWHILE
WAIT SEC 0.5
ERG=$MSG_T.ANSWER

SWITCH  ERG

CASE 1

$IDENT_STATE=#I_TEST ; TEST

IF $MODE_OP <> #T1 THEN
   IF $OV_PRO > 10 THEN
      $OV_PRO = 10
   ENDIF
ENDIF

IF ($IDENT_STATE<>#I_TEST) THEN
   GOTO IDENT_END
ENDIF

$ACC_AXIS[1]=1
$VEL_AXIS[6]=1

PTP_REL{A6 -0.001} ; TEST MOVEMENT

CASE 2   ; Warm-up: do 10 testcycles

$ACC_AXIS[1]=1
$VEL_AXIS[6]=1

IF ($OV_PRO < 50) THEN
   WAIT FOR TRUE
   WAIT SEC 0.5
   $MSG_T=EMPTY_MSG
   $MSG_T.TYP=#QUIT
   $MSG_T.KEY[]="Warning: Override < 50 Percent                                  "
   $MSG_T.VALID=TRUE
   WHILE $MSG_T.VALID
      WAIT SEC 0.3
   ENDWHILE
   WAIT SEC 0.5
ENDIF

OV_PRO_SAVE=$OV_PRO

WAIT FOR TRUE
WAIT SEC 0.5
$MSG_T=EMPTY_MSG
$MSG_T.KEY[]="Warm-up: scaling from 50 percent of override to 100 percent        "
$MSG_T.VALID=TRUE
WHILE $MSG_T.VALID
WAIT SEC 0.3
ENDWHILE
WAIT SEC 0.5

FOR I=1 TO 10

   $IDENT_STATE=#I_TEST
   IF ($IDENT_STATE<>#I_TEST) THEN
      GOTO IDENT_END
   ENDIF

   IF (I < 4) THEN
      $OV_PRO=OV_PRO_SAVE*OVERRIDE_PERCENT[I]/100
   ENDIF

   PTP_REL{A6 -0.001} 
   
ENDFOR

CASE 3

$IDENT_STATE=#I_MEAS ; MEAS

IF $IDENT_STATE==#I_TEST THEN
   WAIT FOR  TRUE
   $MSG_T=EMPTY_MSG
   WAIT SEC 0.5
   $MSG_T.KEY[]="Measurement not in T1 or Override < 50                          "
   $MSG_T.VALID=TRUE
   WHILE  $MSG_T.VALID
      WAIT SEC 0.5
   ENDWHILE
   WAIT SEC 0.5
   
   $MSG_T=EMPTY_MSG
   WAIT SEC 0.5   
   $MSG_T.KEY[]="Measurement will be finished as test cycle                      "   
   $MSG_T.VALID=TRUE
   WHILE  $MSG_T.VALID
      WAIT SEC 0.5
   ENDWHILE
   WAIT SEC 0.5
ELSE
   IF $OV_PRO < 100 THEN
      WAIT FOR  TRUE
      $MSG_T=EMPTY_MSG
      WAIT SEC 0.5
      $MSG_T.KEY[]="Warning:  Override not 100 percent                            "
      $MSG_T.VALID=TRUE
      WHILE  $MSG_T.VALID
         WAIT SEC 0.5
      ENDWHILE
      WAIT SEC 0.5
   ENDIF
ENDIF

IF (($IDENT_STATE<>#I_TEST) AND ($IDENT_STATE<>#I_MEAS)) THEN
GOTO IDENT_END
ENDIF

$ACC_AXIS[1]=1
$VEL_AXIS[6]=1

PTP_REL{A6 -0.001} ; TEST OR MEASUREMENT MOVEMENT

DEFAULT

GOTO IDENT_END

ENDSWITCH


WHILE  (($IDENT_STATE==#I_TEST) OR ($IDENT_STATE==#I_MEAS))
WAIT SEC 0.1
ENDWHILE
WAIT SEC 0.2

IF $IDENT_STATE==#I_END THEN
GOTO IDENT_END
ENDIF

UNTIL ($IDENT_STATE==#I_MEAS_OK) ; MEASUREMENT SUCCEEDED
;ENDFOLD

;FOLD CALCULATION ...
$IDENT_STATE=#I_CALC
;ENDFOLD

;FOLD END
IDENT_END: 
$IDENT_STATE=#I_END
WAIT SEC 2.0
END
;ENDFOLD
